#!/usr/bin/env ruby

require "rubygems"
require "bundler/setup"
require_relative "../lib/nist_pubid"
require "thor"
require "csv"

class NistPubidCLI < Thor
  desc "report", "Create report for nist tech pubs database"
  option :csv, type: :boolean, desc: "Export to CSV format"
  def report
    if options[:csv]
      NistPubid::NistTechPubs.status.each do |doc|
        puts [doc[:finalPubId] == doc[:id] && doc[:mr] == doc[:doi] ? "-" : "+",
              doc[:finalPubId], doc[:id], doc[:doi], doc[:mr], doc[:title]]
          .to_csv
      end
    else
      puts "Changed | New PubID | Document ID | DOI | New MR | Title + subtitle"
      NistPubid::NistTechPubs.status.each do |doc|
        puts "#{doc[:finalPubId] == doc[:id] && doc[:mr] == doc[:doi] ? ' -' : 'âœ…'}"\
             " | #{doc[:finalPubId]} | #{doc[:id]} | #{doc[:doi]} | #{doc[:mr]} | #{doc[:title]}"
      end
    end
  end

  desc "convert", "Convert old document ID to new PubID"
  option :style, aliases: "-s", type: :string,
                 desc: "Convert to style (short|long|mr|abbrev)",
                 default: "short"
  option :format, aliases: "-f", type: :string,
                  desc: "Convert to format (json, string)",
                  default: "string"
  def convert(code)
    unless %w[mr long short abbrev].include?(options[:style])
      raise "wrong conversion style"
    end

    raise "wrong conversion format" unless %w[string json].include? options[:format]

    unless code.empty?
      if options[:format] == "string"
        puts NistPubid::Document.parse(code).to_s(options[:style].to_sym)
      else
        puts NistPubid::Document.parse(code).to_json
      end
    end
  rescue NistPubid::Errors::ParseError
    puts "[Error] This does not seem to be a valid NIST Tech Pubs legacy identifier"
  end
end

NistPubidCLI.start(ARGV)
