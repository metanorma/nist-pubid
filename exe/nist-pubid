#!/usr/bin/env ruby

require "rubygems"
require "bundler/setup"
require_relative "../lib/nist_pubid"
require "thor"
require "csv"

class NistPubidCLI < Thor
  desc "report", "Create report for NIST Tech Pubs database (fetches from GitHub)"
  option :csv, type: :boolean, desc: "Export to CSV format"
  def report
    heading = %w(
      ID\ changed?
      New\ PubID
      Document\ ID
      DOI\ changed?
      New\ PubID-MR
      DOI
      Title
    )
    if options[:csv]
      puts heading.to_csv

      NistPubid::NistTechPubs.status.each do |doc|
        puts [
          doc[:finalPubId] == doc[:id] ? false : true,
          doc[:finalPubId],
          doc[:id],
          doc[:mr] == doc[:doi] ? false : true,
          doc[:mr],
          doc[:doi],
          doc[:title]
        ].to_csv
      end
    else
      puts heading.join(' | ')

      NistPubid::NistTechPubs.status.each do |doc|
        puts [
          doc[:finalPubId] == doc[:id] ? ' -' : '✅',
          doc[:finalPubId],
          doc[:id],
          doc[:mr] == doc[:doi] ? ' -' : '✅',
          doc[:mr],
          doc[:doi],
          doc[:title]
        ].join(' | ')
      end
    end
  end

  desc "convert", "Convert legacy NIST Tech Pubs ID to NIST PubID"
  option :style, aliases: "-s", type: :string,
                 desc: "Convert to PubID style (short|long|mr|abbrev)",
                 default: "short"
  option :format, aliases: "-f", type: :string,
                  desc: "Render in format (JSON, string)",
                  default: "string"
  def convert(code)
    unless %w[mr long short abbrev].include?(options[:style])
      raise "Invalid PubID style"
    end

    raise "wrong conversion format" unless %w[string json].include? options[:format]

    unless code.empty?
      if options[:format] == "string"
        puts NistPubid::Document.parse(code).to_s(options[:style].to_sym)
      else
        puts NistPubid::Document.parse(code).to_json
      end
    end
  rescue NistPubid::Errors::ParseError
    puts "[Error] This does not seem to be a valid NIST Tech Pubs legacy identifier"
  end
end

NistPubidCLI.start(ARGV)
